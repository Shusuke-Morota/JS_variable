
//変数を宣言するキーワードに関して

//そもそも、let, const, varは何が違うのか。


//let ... 再宣言×  再代入◯  スコープ(ブロック)  初期化×
//const ... 再宣言×  再代入×  スコープ(ブロック)  初期化×
//var ... 再宣言◯  再代入◯  スコープ(関数)  初期化(undefine)

//再宣言とは何か。
//同じ変数を宣言すること。

//以下再宣言の例

// let a = 0;
// let a = 0;

//letやconstはエラーが発生する。

//しかし、、、以下の例だとどうだろうか。

// var b = 1;
// var b = 2;

//varの場合は後から宣言した方がコンソールに出力される。


//再代入とは何か。
//値を設定し直すこと。
//例えば変数宣言のときに、、以下再代入の例

// let c = 0;
// c = 1;

//cと変数宣言をしたときに、後からc = 1と変更する、これを再代入という。
//８行目でも示したが、constの時は再代入するとエラーが発生する。


//ブロックスコープに関して

{
    let e = 0;
    var f = 0;
}

//letやconstに関してはブロックスコープが有効。
//varに関してはブロックスコープは無視される。
//そのためvarはブロックスコープに記述しても、グローバルスコープに記述していることと変わりがない。


//初期値(ホイスティング)による違い
//例えば変数の宣言よりも前に値を出力しようとすると、、

console.log(g);
let g = 0;
//letの場合はエラーが発生する。constに関してもletと同様。

console.log(h);
var h = 0;
//varの場合はundefinedが初期値として設定されるため。コンソールにはundefinedと表示される。



////////////////////////////
//////////  結論  //////////
///////////////////////////

//　let, const, varが混在するコーディングはバグを生む原因となる。
//  varは非推奨
//  １度宣言した値を変更したくない場合は、constを使用する。
//  変数宣言の変更をしたい場合は、letを使用する。